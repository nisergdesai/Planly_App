import nltk
from nltk.tokenize import sent_tokenize
from transformers import pipeline

# Ensure necessary NLTK resources are available
nltk.download('punkt', quiet=True)

def chunk_text(text, max_words=1000):
    """Splits text into chunks of ~max_words while keeping sentence integrity."""
    sentences = sent_tokenize(text)
    chunks = []
    current_chunk = []
    current_length = 0

    for sentence in sentences:
        words = sentence.split()
        if current_length + len(words) > max_words:
            chunks.append(" ".join(current_chunk))
            current_chunk = []
            current_length = 0
        current_chunk.append(sentence)
        current_length += len(words)

    if current_chunk:
        chunks.append(" ".join(current_chunk))

    return chunks

def summarize_text(text):
    """Summarizes input text using a pre-trained BART model with improved chunking and aggregation."""
    summarizer = pipeline("summarization", model="facebook/bart-large-cnn")  

    chunks = chunk_text(text, max_words=1000)
    summaries = []

    for chunk in chunks:
        chunk_summary = summarizer(
            chunk,
            max_length=int(len(chunk.split()) * 0.5),  # Retain 50% of chunk length
            min_length=int(len(chunk.split()) * 0.3),  # Minimum 30% of chunk length
            do_sample=False,
            length_penalty=2.0,
            num_beams=4,
            early_stopping=True
        )
        summaries.append(chunk_summary[0]['summary_text'])

    # If multiple summaries exist, merge them and summarize again
    if len(summaries) > 1:
        combined_summary = " ".join(summaries)
        final_summary = summarizer(
            combined_summary,
            max_length=int(len(combined_summary.split()) * 0.6),  # Final summary retains 60%
            min_length=int(len(combined_summary.split()) * 0.4),
            do_sample=False,
            length_penalty=2.0,
            num_beams=4,
            early_stopping=True
        )
        return final_summary[0]['summary_text']
    else:
        return summaries[0]

if __name__ == "__main__":
    input_text = """on this computer. All right, I'm recording now. I just want to give a, I guess, update on how the code works. So feel free to let me know if you have any questions on anything as I'm speaking. Okay, so currently, so we're on the Tango branch. Let me just run this. So it's, I think, one dev. Okay, um, then I think the others, I got to turn on the server code. So this is the front end code. Um, server code can run anywhere. It can run locally or it can run on your, yeah, it can run on locally. You don't need to have this on a server, but I am too lazy to set this up on on locally right now because of the party. It's already there on the server ready to go. So, okay, I see it's already there. So we don't need to worry too much. Okay, and then the run it, I just, uh, you just, um, sorry, running, but I usually just use that, um, I think I mentioned this before the debug, debugger, so I just run the debugger. Just runs this Python file and run this okay, so now it's available at this 2000. Welcome to back in the dump. Okay, so now let's look at the code base and quickly on a high level and see what's going on. And again, this is may not be exactly what? And, um, it's not through 2001. It's may not be exactly like what would, um, like everything, but this, okay, so loads and then I think it takes a second and then you sign in. Okay, so what's going on there? Um, so the entry point I believe, and I was like figuring this out because it took me some time. I was unsure what's going on. Um, is there's this index.type script. I think this is where the, it starts. And, uh, I don't think we're using this to be honest. I'm just going to ignore this. Um, so some of this I never wrote. I think maybe Albre was doing this and okay. And so what I think what's going on here is there's a hook called use user that's provided by something called, um, clerk. So I've talked with Albre about this. He told me that this is what they use for authentication. It's a very quick authentication system library. It provides you the inbuilt methods for sign in, sign out and all that and that's it. And then this used user I think gives you metadata about the user whether you're logged in or not, um, and so on. And Tom, before you have any questions, I can try to answer them or let you know if something's not really important or not. So you can see all this information about the user that they're signed in like the first name, the last name and so on. You can get that information. So you just do it. It's very simple to set up. You just do a use user. And then, um, and then you could just check to see if the user has been loaded, meaning did you end up logging in yet or not? Um, if there's some error like a crash, something then you have something that went wrong. I guess that's a div. We might change it later on. Um, and then then you return, you know, this is the component that returns. So if the user has been signed in, then um, or not signed in, you see the sign in button. That's why you see this very primitive sign in button. So if Nisorg is watching this, you probably want to put this is where you put your, your code for the homepage screen because that's the point where they're not signed in. So if I like hide this, you notice it's gone, right? And now the showing. So I guess wherever Nisorg is working on this, you know, that's where you put the code. But again, as I said before, right? You want to, I don't want like a bunch of component code here. It may make a separate file, make a separate folder, call it, and maybe call it, um, like a landing page screen and then, you know, put a component in there for the landing screen. And then you just put that, you know, make a reference, create like a, import it and then load it here. So it needs to be like break, you want to separate the components, right? Just like, I think, hopefully those tutorials have shown. Um, is that clear Jackie about this, this first screen? Yeah, I've been, uh, I've worked on a little bit on those stuff. So I get it. I understand that well, yeah, because I didn't, I didn't change the, the details of the code. So I think yeah, a lot of this should be clear. Uh, does this make sense for you? Yeah. Uh, not too familiar with the JavaScript, but it seems like you're just using the important components, when you're just placing them. Yes. Is that and like if the yeah, so if the user is signed in. So let's do that together. So this, uh, Tom, this is all pre-built. So I think Jack already knows, but this is all like, I think it's just like already pre-built. It's like, um, they call this a better version of Firebase apparently, like the super base and everything. Um, which I didn't know there was a better version, but there was there is, um, that's what they're, I said, uh, surrender and, um, they all design. It's super, super base. I think in this, this login is better than Firebase off. It's just fast. So that things have changed now. So whatever we, we used to use back then or not is not a, it's not the new, it's not the new, fire store. Actually, it was, that's what I used for, um, so I was using for, uh, this QA agent initially. I was told this, this old, so that's what they switched to that. But yeah, this, this, this, then this, okay, so once you signed in though, um, I kind of created this component. It's called home screen right here. Okay, so in the future, again, I want to folder, it says home screen, and then all the accessory data files for the home screen should be in there. So it should be, that should be the structure. But anyways, I just, I just had to quickly get something working. This is the home screen component. Same thing, a bunch of like, you know, UI components, Tom. The main thing here is, is that there's a drawer, navigation drawer. I think you see it here. That's what this is. Right. And, um, let's take a look at the drawer for a second. I think permanent is what's causing it to like show up constantly. Okay, no, that's what's gone. Okay, don't need that one. Maybe anchor left. Let's see what that does. Hey, that one, okay, let's keep your anchor right. So it happens. So you see it's here now. I'm not sure in the future, we're going to change this where we don't use like, maybe this UI, because it's a little like, it's not perfect. But I mean, I don't know. I think it's fine for now. But yeah, this is a bit thing. Anyways, this is the component. It's a list. Um, I just do like a for loop. This is not as important. But one thing to remember for everybody is in the future, any constants, I expect you to have like a constants folder and you store them and you reference them. And he like, I expect you guys to understand when to use enums and why not to using when it's not really as important to use enums. Um, these are what enums are. So you can search online with enums are and the key, you can see the key thing, right. It's, it, it provides you like, um, a hard coded like, it stores the names for different hard coded values that you can then reference. And the benefit is it prevents you from like accidentally spelling something wrong. You know, like this, this here, I need to send this to the backend. This is like the exploration strategy. Like I need to send it in this specific string format. Um, and so to avoid like misspelling things, I just made an enum for it. So you should take a look at this enum stuff. I think the many of you might know what this is, but if not, it's good to know. So have enums, have constants and then refer to those that saves a lot of, um, stress when it comes to spelling. This should probably be enums too, but, um, you know, happens, but that that's going to be some of the common things I expect when we end up doing the MRs. I'm going to be like, Hey, this needs to be an enum. This needs to be in a, you know, constant file and so on. So that's just something to remember. Um, anyways, uh, yeah, you just have these screens, uh, and I just, um, for each of these screens, I just create like a button for each one. Uh, these might need to change. I just, I just copied. I think someone put this there, but we might need to change this in the future and have like our own custom buttons. Um, but yeah, that's what's going on there. And then, um, there's like a last button at the bottom, called the connect, which I added. And that's the connecting. And I think, uh, who is Albert? I've wanted to do this. Well, this is where the connecting has been moved. So, um, when you tap on connect, choose device, you see this load show up. So that's coming from this, this action called connect here. And I copied a lot of this from what we used to have before, but essentially, this connects to a device. Um, and how this is done in a very like simplified manner, is this function called connect device that we made. I put this in a separate folder file. See the benefit of doing that. All the complicated stuff. I separate it into different files so then you can see what, you know, what it's easier to, um, it's easier to debug them, right, especially the hard stuff. So, um, this code, um, you don't need to know the details of this. I mean, I mean, it's just basically like, um, what's going on is, um, you're just requesting the browser. This is the bug, requesting the browser to choose a device. Once you've chosen a device, you connect to it, and then once you connect to the ADB, ADB allows you to, you know, interact with the phone, Android phone and get various information from the phone at every moment. Um, and then so I just initialize various data, um, and then I return the ADB. Did that clear Tom? I guess on the high level on this connect device. Yeah. Just a bunch of boilerplate code. It took us some time to figure out, but it's pretty, uh, that's the area that Albert's trying to fix the bug on. Where the next round of the expression page. Yeah. Yeah. So, look, if you look, okay, so let me connect the device. Funny, funny, it's not showing up. I don't know why this, that error used to, that error at the bottom. I don't know why that's happening. Um, is ADB just for Android? A, B is in F, yeah, it's just for Android. Um, they have something called IDB for iOS, but it's not, I, it's just iOS is very restrictive. So, um, I don't know if that's going to work. But I don't know, in the future, we'll see if, uh, we get it for work, but again, if you get it working for Android, um, it won't be that, I mean, iOS, um, that won't be as, it's just, it's the models won't be as challenging. It's the same, same principle. I don't know what's going on here. Uh, why it's not showing the phone. Oh, I didn't connect it. That's why I'm stupid. Can I make a connection? Yeah. So, Albert is doing is, um, sorry, maybe he'll fix this to fix this. I mean, I, I put a tri-catch patient, maybe prevent the errors. Um, so it connects, it connects, and I changed the name, the selected name of the device. But the problem is when I, when I tried to, um, create, so I can control the device, but look what happens when I go, go to explore and then I go back to canvas. You see what happens? It's black. And it's just nothing there. It's just not like, it's just unusable. But what's funny is, is it hit on the, if I, when I'm, when I'm like controlling the canvas, the phone is actually modified, the phone is actually like moving as well. So I don't know what can you go back to, um, before you have the black screen, let me try to explain it. Just click on the black screen. Yeah, you click on the black screen. There's nothing like it, like, it even happens on here. So, let's say I do this, um, and then I choose device. Um, can I go to explore? Right? Okay, it's good. Okay. Um, you can't really control the device from explore. I didn't, I intentionally didn't do this. But let's say I go to dashboard and I go back to explore. It's black now. It's not like, it's not connected continuously. It needs to be connected continuously. That's the point of why I added this here. So you only need to connect once and then it's all good to go. And then I can just keep, I can go here, I can go here and the device will always be, like shown kind of thing. That's my goal. Um, one thing that maybe the can solve this solution is, if you look at old demo, I'm going to delete this. It's fine. I'll just come back to it. If you go to old demo, um, I'll give you a sec. It's alone. It's connected, right? And then like, you go to SU Pi and then this, this is like loading the device. Like, if I go back and I come back, like it's, it works fine. You see that? That's what I want. It works fine. So I don't know, maybe Albert, you go check in here what they're doing when they're switching the device. Is that clear Tom? The issue. So see, a lot of it's here. It's not like, you have to go invent it. Like I was trying to say before it's there. Like the code is there. The GitHub is there. The code is there. You just have to go dig through it and figure it out. Is that clear Tom? The goal for what Albert's trying to do? Yeah. So it's that and also, so connecting continually and also the mouse moving. Yeah. Yeah. Mouse moving. Well, I think maybe Argus, right now, but yeah, the typing, the more you see the typing, I'm not typing from the device. I'm typing from the keyboard. Yeah. This is this is this is this is very like this gives us makes things a lot easier actually because everything is there. You just need to go and dig through the code. It's a skill. You have to dig through the code. You got to figure out like how wide it's working a certain way and so on. I hope I'm really hoping that some of them can figure it out like RJ or Aliquio or Albert also can be an expert in this. This is a, I don't want to be the only one I as expert in that. All right. But going back to the the, I'm going to stop this. It should be also a disconnect option to. Okay. Going back to this. Yeah. So we talked about connect device. This does the actual like starting the video to run. I just copied a lot of this and it just, it's just, you know, it's just a boiler play code that you can honestly get from the whole demo. It just starts streaming and then it replaces the canvas so that it loads the thumbnail of the actual video and that's that's for connecting the device. So, um, all right. So let me get start with the dashboard. So I think a lot of this, um, I'm not an expert in this. So again, I think Terry is the best one right? Guys, I like very worked on that test generator or the GBT stuff. GBT stuff and all connecting to the database. So he's, so one suggestion though, as I said before, it needs to be broken down. So maybe that's a task I want to get Terry to do is break this down, create a, create a folder called dashboard, break this down, uh, separate the files so that it's just makes more sense because I don't understand what's going on. Um, yeah. So then Tom, this is like the chest generation essentially. So I just, it's a bunch of UI components. Um, you, you don't have any questions on this red jacket. You know what's going on here. I didn't change anything. Do you understand this code? Yeah. Oh, Terry actually explains. Tom, like, I'll work to be by kind of forgot, but yeah, I don't have questions. Okay. So you have any questions you could ask him. I don't, I'm not an expert. I didn't go in detail in fixing this. One thing I want him to fix is obviously like break things apart and then maybe the UI, like just to make it like you see how it's like I wanted to take up the entire screen. Um, be at Tom. I mean, it's, it's just a bunch of code, honestly, let me hero that does the job. I mean, the key thing is to generate tests. He uses GP4. This is the prompt to this generates the tests. Are you using GPT? No, I think we're using four vision preview. So maybe, yeah, because we take it, maybe it's four or four zero. Uh, are you using your own account? He's using mine, I think. Yeah, we're using our, by. These are some tests that he made. Um, and these are saved on a database too on super base. So any questions, Tom? Or, um, can I see a page again? And this is subjected to change. I made this up like the actual like outputs of the GPT form model, what they need to be like the formatting. If you want to change GPT to return other things and let me know like, so it outputs, uh, the test app name, the name of the actual test, title name of the test and the description and then sample data, I think. I don't know what's going on here. Yeah. Um, there's no way with other test cases. Test cases are just, uh, oh, I see those are test cases. Yeah. And there's like a test input. I don't know why it's not showing here. I think I made messed up. Maybe Terry can look at that. I don't see it. Yeah. And then this is like, this is, this is the test case. Obviously, it's, it's not really why. It's not, it's not functional right now. If you press on a run, it doesn't, no, actually, okay, that's, that I did, I did some fixing to improve that. So, um, that should be functional. So essentially in the dashboard, I added some improvement. Um, right here. Uh, it's called run tests. You pass in the idea of the test. I retrieved the data from the, whatever this is, the mutate async. And I, I move, I, and then I move the, I make the page switch to canvas. Um, so it switches to canvas. It passes the step object of the step, or the test that was, um, clicked on and it passes it to the file. I think I mentioned to these guys before. Um, I don't think it's perfect. I think this, this navigation needs to change, but I just did it this way. And then I passed it in this thing called switch to canvas. Um, uh, from the, from the home screen, because the home screen is what loads up to each of the screens. Right. So if the screen I clicked on is dashboard, load dashboard, if the screen I clicked on is canvas, load canvas, if the screen I clicked on the exploration, load expiration, and I passed various information, I don't think this is the best way of doing it, but this is the way I just made it, made things to work. So Eric will obviously improve this for someone else would, but um, does that logic make sense to both of you guys? How, how we, how the data is sent to the canvas? Why it switches? Yeah, feel free. If it's, if it's not, that's fine. We'll go in detail. Is it clear for you, Jackie? I'm just saying like I have more, like I'm just like kind of curious about how you did like the graph stuff or like how you pulled. Oh, yeah. Oh, the screen itself, right? This one, like the image, like I was looking like a JSON file for like the images and like like way different than I what I did. So I was like, look, oh, yeah, not much different. I'll we'll go over that, but I want to go over everything. So does that make sense though? For you? Oh, it makes sense? Okay. Yeah, because I want everyone to know everything so that they can, you know, work on this. Oh, does it make sense to you, Tom, then generally? So this part is just for navigating between different pages on the web app that we have. Yeah, this, this area, but obviously when I click on this, I need to automatically go to canvas, right? And that's what I just showed that functionality of how it's okay. But then the function where it's actually does the testing on the boblab is not there yet. Right? Oh, the actual action prediction? Yeah. You know, it works. I think it was causing a bug that one. No, when we showed the professor who was working them, now I see another, I say, I thought your hard code or that, but it's from an actual like on and so. Yeah, it's on its own. Let me see. We'll give it a shot. We'll cross our fingers. Hopefully this time it worked. Okay. So we got to that part. And then this is the canvas, right? And nothing's hard coded. The graph is hard coded. And I'll talk to you, Jackie, and we'll talk about that in a second. Again, same problem. It's really long. I think Ben of being nice. So Ben and Leaky are just working on all this kind of this area. We need to move some of this. We need to make a folder. We need to separate the code. And it cannot be this long. It's just confusing. So let's separate things up. So the key here is, I mean, there's a UI for this that Ben made, right? Whatever he's working on. I mean, not whatever resin like it's a UI, right? UI work and there's some bugs, the hill fix. But the key, I think the big key here is the expert, the generate action, right? You see this big button here that says auto generate. So that's running. That's running. That's running. That's running. This thing sets up a web socket. Sends in the data about the screenshot of the about the app itself currently. Like what it's, you know, information about the app. I think I mentioned, I showed this to you guys yesterday, earlier, right? This XML stuff. So this runs ADB command to get the data. So this might be useful for Elykian, RJ, these calls that I'm doing. We have to do another call for the lock hat and everything. Yeah. And then it might be Albert too, if you want to. But basically, yeah, this sends the data about the screenshot. And this is not a hard code of task, Tom. So is this answer your question? You see this? This is the, I send this back in. Given the sample task description and sample input, verify the functionality of the feature. I put the, I send the description and the sample input. And I send that to the server. So that'll be this guy, whatever this data is. So when you send that, um, it policies policy task. But yeah, there was a question. So then from there, what happens? Do you send it? Yeah, let's, let's put some break points and make sure that maybe we can fix the bug. I think it's a very liminal minimal bug, be honest. Let's see. Yeah. So you, uh, you just, you just, you just hit auto generate. I think you should just start the back in, okay, it opened. And you should stop there. Let's just, let's just, let's just fingers crossed. And it takes a second. It takes a second. So it's, it starts that this is the back end. Um, it sends in the data. That's actually traced the code and see. Oh, I think it worked this one. This one worked. So let's see what the event is. The event is what? The event is a scroll. So it's, uh, it's, uh, it's outputting. It's going to output a scroll, I think. So the, so it, um, it processed the screenshot and everything. And then it, it, it, it, it retrieved the, the action to take, the action to take is, um, I'm just going to show you what's most important here. It is the, um, the event type, which is scroll. And then, uh, the direction, which is, um, um, up. Does that make sense? Some, some high level. Yeah. Yeah. There's no to school because it needs to run the test case or is it just for now, it's understanding how to navigate from that screen. No, this, this is, this is, uh, understanding the test case. So I understand the test case and then get understands what to do on that page by analyzing the screenshot. The screenshot and then, um, there's a, from the exploration, there's a database. This is a database. It's very minimal. This is the previous nodes that have been seen. So look at this. Is that third? Okay. And so does that mean it finished running the test case? No, this is just the first step of the test case. Uh, but it's not, um, it's, oh, because you put a break point. It's only doing like one test step at a time. Yeah, the name, the name I actually send it yet. So this, this action is sent in text format. Hey, do a scroll, uh, at this position. At these coordinates, do a scroll, start and stop. Actually, no, this is the balance. So you scroll in this area. You scroll up. So then if you finish running it, it completes running the test case. It runs that time. I think it just scrolled up. You see, it's a lot of. And the phone is different. But anyways, okay. So then the next action happens. Okay. And then, okay, let's see what the next action. I think it's doing scroll constantly. You know, it's doing scroll down again. So we need to scroll down. Okay. Let's see if it's going to keep asking us to do this. I think I'll change. Okay. Now it's going to change. I think. See the crash. Isn't there? Oh, man. There's error. I'm going to have to fix some of that skill fixes. I think this is the YAML file. Like when it's trying to create the actual, um, uh, this is not working anymore. Okay. That's one. Okay. Anyway, this is an error, which I'll have to, I'll probably, I'll end up fixing this now. But, um, yeah, but you get the idea, right? Overall, it just does the loop each time. I mean, and then it gets a little hard. If you go into the hood and you want to look at what's going on, it's a bit, it's a bit challenging. I mean, I was able to figure it out. I mean, you remember, you guys remember generators from Python? I think you know generators, right? Um, Irvine class. Remember, yeah, use generator basically. We use a generator. So generates the next action, yields there, sends that to the server, and then gets the screenshot again. And then it keeps, keeps asking, checking what the next action should be and stuff. Sublimat that. So, so the loop is for event, right? So, um, it just keeps outputting an event. So there's touch. How, how is it, how does it know, how does it know how to break down test cases into events? Gb4. Okay. Yeah. Gb4. The problem is actually in here, I think. Do I remember the name of the problems? You know, look at lucky. Oh, okay, this one. Jan, query GPT. It is API key. And then it just asks you before for what the action I should take is. That's what you see here, actually, before this error, I think this error is actually trying to save it to a file in this too large of a file. I think I know what to do. But yeah, here you go, I can share this. Um, here is the response steps. Tap on the button ID equals one, select repeat, select the specific days, tap on save analysis. The user needs to access the repeat functionality and more options menu to set specific days for the alarm. And so it's just like, it's just like a JSON format of output or what to do. The tap should be output. Maybe if we get lucky, we can fix this. I want to fix this. Okay, it says a 966 input policy. It should be actually very easy to fix. I introduced this very recently, I think. Okay, I have a solution for this. I think the following is 421, this is Mr. Prom. So what we can do is, I'm going to remember, this needs to be fixed. And I could just make some random thing up. Something like that. It'll do in this one thing. So actually, I want to show you the full thing running itself, you know, shouldn't just be. Let's try one more time. Yeah, I was seeing the future time I want people to be able to just like go and modify it, because right now it's like, oh, it's just me. I don't like that. It's just me. Okay, let's try again. Auto-generate. Okay, there's a bug. I don't know what happens. Connect opens. Okay, let's see. Scroll again. It tries to do a scroll. And then go. Okay, nowhere. This is not like this, nor okay, this is the one causing error. So this is a tap, right? This is a tap. Event type is a click. Okay, so let's actually see the click happen. So you see this screen first, if I hit play, guys, it changed, it changed on my screen. Let's see if it changed here. Why isn't it showing the change? Anyways, you see the here, right? Tom, the analysis. So you see the step one. Oh, there you go. Change. You see that? It changed. And then this is like the output of the GP4. You guys see that? In order to add a new alarm with default settings, the user needs to tap on the add alarm button. Yeah, it's a pretty cool action. But the problem is when I do the next one, what is this one going to be? This is, let's hold a click, I think. So it does, I'll tell you if it does the action because there's a delay. I don't know why. I don't know. Sometimes the action is done. And then the audio... Oh, it's clicking on some or clipping something! Okay. So you see, oh, you see Tom, it like, it like, it doesn't keep adding a new step each time, which it should be doing every places. It just replaces it. So Ben, Ben's watching, Ben watching this, that's the problem. So I don't know, like, you can try manually doing it. Because obviously this works. Like, why does this work, right? But when you add, when I add like, when I update the state and I try to add a new step it fails, so maybe someone can, so hopefully Ben can fix that. But is that clear for you guys on this process? It's very straightforward actually. The Explorer works exactly the same actually. It's very soon. I just changed the strategy. But I will talk about the Explorer last step. But is that clear? Yeah, that's a question. Okay. So that's that. I'm going to keep that leave it as it is for now. Actually, we'll stop it. Okay. So that's that. So that's the one that works. Hopefully that's clear. That's the canvas. And then lastly, there's the, your question, right? Check you the Explorer. So the Explorer, honestly, like a lot of it, I kept it similar to what you did. The only thing that's obviously some things had to, I had to incorporate the graph a little bit. So how the Explorer works is. Okay. So I added, this is something I thought we should have is, we should have the actual, you know, screen when you want to do Explorer. Like you should have the screen showing. So that's why I added the screen here as well. And it's, you know, it's basically, you said, wait, can you interact with it? No, no, no, I don't want to do that here. Not on here. It's just a screen. The idea is you can hit Explorer. And again, we have to improve this periodically. This is very rough. Okay. Someone has to fix this. But the idea is you can choose which kind of Explorer you want. So I'm like, let's say naive BFS. And then I hit. Let's run it. So let me, let me run this server. Get it started. Okay. And then I can hit Explorer. It's a cross. It's just some error. And hopefully this, okay. So same thing, same process. It just ignore Tom. There's just no task at this point. I just ignore as a task. Oh, shit. I think it actually sends this as a Z-Fell task though. Oh. Anyways, it doesn't matter. But the point is it, it's an explorer. So it doesn't really take into the task into account. So this one is first. First it does a tap. The long click, I guess. So you actually you'll see, let's actually just see it running. But I think it's changed again. I think it clicked on the plus again. Let's see. It should just show you. Yeah, you see. So just keep going. We'll just keep going. Let's see idea. Just keep exploring. And so there's that. And it'll just keep exploring. And the goal is Jackie is that this graph will automatically populate as you do this. But currently that's not happening. I just hard coded things to make things show up. And so if you, there's something called the mock graph. And you'll notice how this is very similar to this. I just copy-pasted. So this ends up being created automatically. And it's just represents the graph. So the key is there's nodes. There's a node section. There's an edge section with a list of edges and lists of nodes. The key, the difference is all you need to look at is this ID, right? This is a random ID to uniquely represent the state. And then there is an image field that tells you the location of the image and like the file system path on the back end. And yeah, the nodes have that. And I just tell you what maps to what. This, the from and the to tell you what node maps to what. This is a very small graph. So these two maps together. And then the second thing is you can see is, it just tells you the event type as well. It's a long click and so forth. And so what I do is I just copy-pasted this. And I pasted it in the front end. And then I just load up the JSON. And what happens is a little, OK, so. You see the mock graph here somewhere. It's here. I don't know where. mock graph. I think it's this. Oh, an app graph here. This is your code. This area is, I think, more than mainly the code you had. Yeah, so I just kind of copy-pasted it. I think we talked, you showed me this information, right? So if you remember this. Yeah, so I just made a very minor changes. Maybe you can make your changes. You said you changed some of this so you can improve it. And then just just just gets the data from the graph, right? mock graph. And then it just gets that data. And how do I actually get the images? Because you just had a hard coded images. We just do a get request to the backend. I just made a backend call. So it's in the main, I think, in here. There's a thing here called get image. You just give me the path of the image, and then it returns the image. The path of the image is exactly the same. You just give me this guy, and then it returns that image. That's what the, and that's what's actually getting called. The backend URL is just getting called for that. So if you look at, we can actually try one. Why not? So let's do postman. I can actually do it now. It takes a second. OK, so let's actually just go to the live graph, and then just steal one. We'll steal this one. And so you just, this is the backend call. Get image, image path. And this is the path we just got. And then you see the image at the bottom. That's what's getting loaded here. Well, actually, it's not. So let's actually load this new one, even though the old one is kind of cool in it. Let's just put it in. So let's take the mock graph, copy, paste, save. As you can see, things were changing here. I'm going to stop running this, but let's see the explorer. OK, now you see the old ones. You see that? I see it. Well, I have a question though. If I'm like, got it getting stuff from the backend, I'm using Neo4j. Yeah, because I don't want, I don't want, I mean, yeah, we're doing this, but this one scale. I don't want to serve it with a bunch of files in it. So we want to use Neo4j. That's still the goal. I just made it so that it's, so we had something to show last week. Oh, I see. Yeah, so you need to get Neo4j for the work. Second is, I don't, we cannot, obviously, you saw, I was manually downloading this. So ultimately, the backend directly needs to save the graph format on your super base or however you guys decide to save the graph. And then the images themselves also need to be saved on whatever. I think you guys talked with Surinjur and what were you saved that? And then, yeah, it should all be stored on the database, not on the server. Josh, can you like briefly explain how Neo4j comes into this equation? Neo4j, yeah, I'm not an expert, but basically, yeah, Neo4j is the database that saves the graph. So this is just a very small graph. There's only like three nodes, but we're going to have like a graph of a thousand nodes, right? And so Neo4j is a database that saves all that very easily and you can visually see how the graph looks like. This will not scale. This is just like on a server and it might work for like few nodes and it's just hard to manage. So Neo4j comes in the picture where it's a lot, it just saves. And also if you have different customers, how do you expect like, we can't have everything this one server, right? So it saves like the graph structure of the graph on the database and then you can easily just interact with that database and it's like saving, it's like saving on Firebase versus saving our server and retrieving the two different things. Okay, yeah, that makes sense. Okay, is that clear? Any questions from you, Jackie, about this? Is that clear? Where we're at right now? Where we're going ahead to? Yeah, yeah. So this is not at the end all, it needs to be. Okay, I mean, that's the structure of the code base generally. Any questions from you guys? And I'll show this to the team then. Yeah, I think it's gonna take like an hour for the recording to render. I'll introduce by 20 minutes. But yeah, yeah, agree. And then just a server side. I think Eric knows more about this and he'll be refining this. So there's a server, another server we have and it's using TRPC. I think I want Eric to write, maybe go over this for people because I'm not an expert either. I think he will talk about this later on. This is like another server. This stores a lot of other helper functions that we use for action prediction and so on. But I'll leave this for Eric. Maybe you can put this as a task time. He'll go over this, maybe once things are more stable. Yeah, let me get to this specifically. I'm gonna make that interesting character. Okay, I'm gonna have it explain. So we're good, right? The server backing. I can stop recording. Are you good to go? Yeah, I'm gonna stop recording."""
    summary = summarize_text(input_text)
    print("Summary:")
    print(summary)
